#!/usr/bin/env node
const fs=require("fs"),path=require("path"),crypto=require("crypto");class CucumberJsonValidator{constructor(e={}){this.options={strictMode:e.strictMode||!1,generatePlaceholders:!1!==e.generatePlaceholders,maxErrors:e.maxErrors||100,logLevel:e.logLevel||"warn"},this.validationErrors=[],this.validationWarnings=[]}validateAndSanitize(e,t){if(this.validationErrors=[],this.validationWarnings=[],!Array.isArray(e))return this.validationErrors.push({message:"Root must be array",file:t}),{isValid:!1,sanitizedData:e};const s=e.map((e,s)=>(e.name&&""!==e.name.trim()||(this.validationWarnings.push({message:`Feature ${s} has empty name`,file:t}),e.name=`Feature ${s} (auto-generated)`),e.elements&&(e.elements=e.elements.map((e,a)=>(e.name&&""!==e.name.trim()||(this.validationWarnings.push({message:`Scenario ${a} in feature ${s} has empty name`,file:t}),e.name=`Scenario ${a} (auto-generated)`),e))),e));return{isValid:0===this.validationErrors.length,sanitizedData:s,errors:this.validationErrors,warnings:this.validationWarnings}}}class TestStatusCalculator{calculateScenarioStatus(e){if(!e)return"unknown";if(e.before&&Array.isArray(e.before))for(const t of e.before)if(t.result&&"failed"===t.result.status)return"failed";if(e.steps&&Array.isArray(e.steps)){let t=!1,s=!1,a=!1;for(const r of e.steps){const e=r.result?r.result.status:r.status;"failed"===e?t=!0:"passed"===e?s=!0:"skipped"===e&&(a=!0)}if(t)return"failed";if(s&&!a)return"passed";if(a&&!s)return"skipped";if(s&&a)return"failed"}if(e.after&&Array.isArray(e.after))for(const t of e.after)if(t.result&&"failed"===t.result.status)return"failed";return"unknown"}}class CucumberIndexGenerator{constructor(e={}){this.reportsDir=e.reportsDir||process.cwd(),this.outputFile=e.outputFile||"index.json",this.verbose=e.verbose||!1,this.validateReports=!1!==e.validateReports,this.generateStats=!1!==e.generateStats,this.validator=new CucumberJsonValidator({generatePlaceholders:!0,logLevel:this.verbose?"info":"warn"}),this.statusCalculator=new TestStatusCalculator}log(e){this.verbose&&console.log(`[${(new Date).toISOString()}] ${e}`)}sanitizeFilename(e){return e.replace(/\s+/g,"-").replace(/[^a-zA-Z0-9\-_]/g,"").replace(/-+/g,"-").replace(/^-|-$/g,"").substring(0,80)}extractMetadata(e,t){const s={id:t.replace(/\.json$/,""),name:"Automation Test Results",date:null,size:0,features:0,scenarios:0,steps:0,passed:0,failed:0,skipped:0,errors:0,stepsPassed:0,stepsFailed:0,stepsSkipped:0,duration:0,tags:new Set,environment:null,tool:null,version:null,hash:null,validationIssues:0};try{const a=JSON.stringify(e);s.size=Buffer.byteLength(a,"utf8"),s.hash=crypto.createHash("md5").update(a).digest("hex");const r=this.validator.validateAndSanitize(e,t);r.isValid||(s.validationIssues=r.errors.length,this.log(`Validation errors in ${t}: ${r.errors.length} errors, ${r.warnings.length} warnings`));const o=r.sanitizedData;if(!Array.isArray(o))throw new Error("Invalid Cucumber JSON format: root should be an array");if(s.features=o.length,o.forEach(e=>{e.name&&"Automation Test Results"===s.name&&(s.name=e.name),e.tags&&e.tags.forEach(e=>{const t="string"===typeof e?e.replace(/[@{}]/g,""):e.name?.replace(/[@{}]/g,"");t&&s.tags.add(t)});const t=e.elements||e.scenarios||[];t.forEach(e=>{if("background"===e.type)return;if(s.scenarios++,e.tags&&e.tags.forEach(e=>{const t="string"===typeof e?e.replace(/[@{}]/g,""):e.name?.replace(/[@{}]/g,"");t&&s.tags.add(t)}),e.start_timestamp){const t=new Date(e.start_timestamp);(!s.date||t<new Date(s.date))&&(s.date=e.start_timestamp)}const t=this.statusCalculator.calculateScenarioStatus(e);switch(t){case"passed":s.passed++;break;case"failed":s.failed++;break;case"skipped":s.skipped++;break;default:s.errors++;break}e.steps&&(s.steps+=e.steps.length,e.steps.forEach(e=>{e.result?.duration&&(s.duration+=e.result.duration);const t=e.result?e.result.status:e.status;switch(t){case"passed":s.stepsPassed++;break;case"failed":s.stepsFailed++;break;case"skipped":s.stepsSkipped++;break;default:"undefined"!==t&&"pending"!==t||s.stepsSkipped++;break}}))}),e.metadata&&(s.environment=e.metadata.environment||s.environment,s.tool=e.metadata.tool||s.tool,s.version=e.metadata.version||s.version,e.metadata.timestamp&&!s.date&&(s.date=e.metadata.timestamp))}),s.duration>1e6&&(s.duration=s.duration/1e9),s.tags=Array.from(s.tags).sort(),t.startsWith("report-")){const e=t.match(/report-(\d+)\.json$/);if(e){const a=parseInt(e[1]);a&&a>1e12&&(s.date=new Date(a).toISOString(),this.log(`Extracted timestamp from filename: ${t} -> ${s.date}`))}}if(!s.date){const e=fs.statSync(path.join(this.reportsDir,t));s.date=e.mtime.toISOString()}const n=s.date.replace(/[:.]/g,"-"),i=this.sanitizeFilename(s.name);s.suggestedFilename=`${i}-${n}.json`}catch(a){throw this.log(`Error processing ${t}: ${a.message}`),a}return s}validateReport(e,t){const s=[];return Array.isArray(e)?(e.forEach((e,t)=>{e.name||s.push(`Feature ${t}: Missing name`);const a=e.elements||e.scenarios||[];a.forEach((e,a)=>{e.name||s.push(`Feature ${t}, Scenario ${a}: Missing name`),e.steps&&Array.isArray(e.steps)&&e.steps.forEach((e,r)=>{e.name||s.push(`Feature ${t}, Scenario ${a}, Step ${r}: Missing name`),e.result||e.status||s.push(`Feature ${t}, Scenario ${a}, Step ${r}: Missing result/status`)})})}),s):(s.push("Root element must be an array"),s)}generateStatistics(e){const t={totalReports:e.length,totalFeatures:0,totalScenarios:0,totalSteps:0,totalPassed:0,totalFailed:0,totalSkipped:0,totalErrors:0,totalDuration:0,totalSize:0,totalValidationIssues:0,averageDuration:0,passRate:0,failRate:0,skipRate:0,errorRate:0,oldestReport:null,newestReport:null,allTags:new Set,environments:new Set,tools:new Set};return e.forEach(e=>{t.totalFeatures+=e.features||0,t.totalScenarios+=e.scenarios||0,t.totalSteps+=e.steps||0,t.totalPassed+=e.stepsPassed||0,t.totalFailed+=e.stepsFailed||0,t.totalSkipped+=e.stepsSkipped||0,t.totalErrors+=e.errors||0,t.totalDuration+=e.duration||0,t.totalSize+=e.size||0,t.totalValidationIssues+=e.validationIssues||0,e.tags&&e.tags.forEach(e=>t.allTags.add(e)),e.environment&&t.environments.add(e.environment),e.tool&&t.tools.add(e.tool);const s=new Date(e.date);(!t.oldestReport||s<new Date(t.oldestReport.date))&&(t.oldestReport=e),(!t.newestReport||s>new Date(t.newestReport.date))&&(t.newestReport=e)}),t.totalSteps>0&&(t.passRate=(t.totalPassed/t.totalSteps*100).toFixed(2),t.failRate=(t.totalFailed/t.totalSteps*100).toFixed(2),t.skipRate=(t.totalSkipped/t.totalSteps*100).toFixed(2),t.errorRate=(t.totalErrors/t.totalSteps*100).toFixed(2)),e.length>0&&(t.averageDuration=(t.totalDuration/e.length).toFixed(2)),t.allTags=Array.from(t.allTags).sort(),t.environments=Array.from(t.environments).sort(),t.tools=Array.from(t.tools).sort(),t}organizeFiles(e){const t=[];return e.forEach(e=>{const s=`${e.id}.json`,a=e.suggestedFilename;if(s!==a){const o=path.join(this.reportsDir,s),n=path.join(this.reportsDir,a);try{fs.existsSync(n)||(fs.renameSync(o,n),e.id=a.replace(/\.json$/,""),t.push({from:s,to:a}),this.log(`Renamed: ${s} → ${a}`))}catch(r){this.log(`Failed to rename ${s}: ${r.message}`)}}}),t}async getDeletedReports(){try{const e=path.join(this.reportsDir,".deleted-reports.json");if(!fs.existsSync(e))return[];const t=fs.readFileSync(e,"utf8");return JSON.parse(t)}catch(e){return this.log(`Error loading deleted reports: ${e.message}`),[]}}async generate(){this.log("Starting enhanced index generation...");try{const t=fs.readdirSync(this.reportsDir).filter(e=>e.endsWith(".json")&&"index.json"!==e&&!e.startsWith("generate-index")&&"stats.json"!==e&&!e.startsWith(".deleted-reports"));this.log(`Found ${t.length} report files`);const s=await this.getDeletedReports(),a=s.map(e=>e.filename);this.log(`Found ${s.length} deleted reports`);const r=[],o=[];for(const p of t)try{if(a.includes(p)){this.log(`Skipping deleted report: ${p}`);continue}const e=path.join(this.reportsDir,p),t=JSON.parse(fs.readFileSync(e,"utf8"));if(this.validateReports){const e=this.validateReport(t,p);e.length>0&&(o.push({file:p,errors:e}),this.log(`Validation errors in ${p}: ${e.join(", ")}`))}const s=this.extractMetadata(t,p);s.status="active",s.isDeleted=!1,r.push(s)}catch(e){o.push({file:p,errors:[e.message]}),this.log(`Failed to process ${p}: ${e.message}`)}r.sort((e,t)=>new Date(t.date)-new Date(e.date));const n=this.organizeFiles(r);let i=null;this.generateStats&&(i=this.generateStatistics(r));const l={generated:(new Date).toISOString(),version:"2.1.0",reports:r.map(e=>({id:e.id,name:e.name,date:e.date,features:e.features,scenarios:e.scenarios,steps:e.steps,passed:e.stepsPassed||0,failed:e.stepsFailed||0,skipped:e.stepsSkipped||0,scenariosPassed:e.passed||0,scenariosFailed:e.failed||0,scenariosSkipped:e.skipped||0,duration:e.duration,size:e.size,tags:e.tags,environment:e.environment,tool:e.tool,hash:e.hash,status:e.status,isDeleted:e.isDeleted})),deletionInfo:{deletedCount:s.length,pendingCleanup:s.filter(e=>e.needsCleanup).length,lastDeletionAt:s.length>0?Math.max(...s.map(e=>new Date(e.deletedAt).getTime())):null},statistics:i,errors:o.length>0?o:void 0,renames:n.length>0?n:void 0},d=path.join(this.reportsDir,this.outputFile);if(fs.writeFileSync(d,JSON.stringify(l,null,2)),this.generateStats&&i){const e=path.join(this.reportsDir,"stats.json");fs.writeFileSync(e,JSON.stringify(i,null,2))}return this.log(`✅ Generated ${this.outputFile} with ${r.length} active reports`),s.length>0&&this.log(`🗑️  Excluded ${s.length} deleted reports from index`),o.length>0&&this.log(`⚠️  Found ${o.length} files with validation errors`),n.length>0&&this.log(`📁 Renamed ${n.length} files for consistency`),{success:!0,reportsCount:r.length,errorsCount:o.length,renamesCount:n.length,statistics:i}}catch(e){throw this.log(`❌ Generation failed: ${e.message}`),e}}}if(require.main===module){const e=process.argv.slice(2),t={verbose:e.includes("--verbose")||e.includes("-v"),validateReports:!e.includes("--no-validate"),generateStats:!e.includes("--no-stats")},s=new CucumberIndexGenerator(t);s.generate().then(e=>{console.log("\n✅ Index generation completed successfully!"),console.log(`📊 Reports: ${e.reportsCount}`),e.errorsCount>0&&console.log(`⚠️  Errors: ${e.errorsCount}`),e.renamesCount>0&&console.log(`📁 Files renamed: ${e.renamesCount}`),e.statistics&&console.log(`📈 Pass rate: ${e.statistics.passRate}%`)}).catch(e=>{console.error("❌ Generation failed:",e.message),process.exit(1)})}module.exports=CucumberIndexGenerator;