#!/usr/bin/env node
const fs=require("fs"),path=require("path");function isReportFile(e){return e.endsWith(".json")&&"index.json"!==e&&"stats.json"!==e&&"package.json"!==e&&!e.startsWith("index-")&&!e.startsWith(".deleted")}function safeParseReport(e){try{const t=fs.readFileSync(e,"utf8"),s=JSON.parse(t);if(!Array.isArray(s))return console.log(`⚠️ ${e}: Not an array, skipping`),null;const a={filename:e,name:extractReportName(e),timestamp:extractTimestamp(e),features:s.length||0,scenarios:0,steps:0,passed:0,failed:0,skipped:0,duration:0,size:fs.statSync(e).size,validationIssues:[]};return s.forEach((e,t)=>{e&&"object"===typeof e&&e.elements&&Array.isArray(e.elements)&&(a.scenarios+=e.elements.length,e.elements.forEach((e,s)=>{e&&"object"===typeof e&&(e.name||(a.validationIssues.push(`Feature ${t}, Scenario ${s}: Missing name`),e.name=`Unnamed Scenario ${s+1}`),e.steps&&Array.isArray(e.steps)&&(a.steps+=e.steps.length,e.steps.forEach(e=>{if(!e||!e.result)return;const t=e.result.status;switch(t){case"passed":a.passed++;break;case"failed":a.failed++;break;case"skipped":a.skipped++;break}e.result.duration&&(a.duration+=e.result.duration)})))}))}),a}catch(t){return console.log(`❌ ${e}: Parse error - ${t.message}`),null}}function extractReportName(e){return e.startsWith("Admin-Client-Settings")?"Admin Client Settings Tests":e.startsWith("report-")?`Test Report ${e.replace("report-","").replace(".json","")}`:e.replace(".json","").replace(/-/g," ")}function extractTimestamp(e){let t=e.match(/(\d{4}-\d{2}-\d{2}T[\d-:.]+Z)/);if(t)try{const e=t[1].replace(/T(\d{2})-(\d{2})-(\d{2})-(\d{3})Z/,"T$1:$2:$3.$4Z"),s=new Date(e);if(!isNaN(s.getTime()))return s.toISOString()}catch(s){console.log(`⚠️ Failed to parse ISO timestamp from ${e}: ${s.message}`)}if(t=e.match(/report-(\d{13})\.json/),t)try{const e=parseInt(t[1]),s=new Date(e);if(!isNaN(s.getTime()))return s.toISOString()}catch(s){console.log(`⚠️ Failed to parse Unix timestamp from ${e}: ${s.message}`)}if(t=e.match(/report-(\d{10})\.json/),t)try{const e=1e3*parseInt(t[1]),s=new Date(e);if(!isNaN(s.getTime()))return s.toISOString()}catch(s){console.log(`⚠️ Failed to parse Unix timestamp (seconds) from ${e}: ${s.message}`)}try{const t=fs.statSync(e);return t.mtime.toISOString()}catch(s){return console.log(`⚠️ Failed to get file stats for ${e}, using current time`),(new Date).toISOString()}}function generateIndex(){console.log("🔄 Generating tolerant index...");const e=fs.readdirSync(".").filter(isReportFile);console.log(`📁 Found ${e.length} potential report files`);const t=[],s=[];e.forEach(e=>{console.log(`📊 Processing: ${e}`);const a=safeParseReport(e);a?(t.push(a),a.validationIssues.length>0&&s.push({file:e,errors:a.validationIssues}),console.log(`  ✅ Added: ${a.scenarios} scenarios, ${a.steps} steps`)):(s.push({file:e,errors:["Failed to parse file"]}),console.log("  ❌ Skipped due to parse errors"))}),t.sort((e,t)=>new Date(t.timestamp)-new Date(e.timestamp));const a={totalReports:t.length,totalFeatures:t.reduce((e,t)=>e+t.features,0),totalScenarios:t.reduce((e,t)=>e+t.scenarios,0),totalSteps:t.reduce((e,t)=>e+t.steps,0),totalPassed:t.reduce((e,t)=>e+t.passed,0),totalFailed:t.reduce((e,t)=>e+t.failed,0),totalSkipped:t.reduce((e,t)=>e+t.skipped,0),totalErrors:0,totalDuration:t.reduce((e,t)=>e+t.duration,0),totalSize:t.reduce((e,t)=>e+t.size,0),totalValidationIssues:s.reduce((e,t)=>e+t.errors.length,0),averageDuration:0,passRate:0,failRate:0,skipRate:0,errorRate:0,oldestReport:t.length>0?t[t.length-1].timestamp:null,newestReport:t.length>0?t[0].timestamp:null,allTags:[],environments:[],tools:[]},r=a.totalPassed+a.totalFailed+a.totalSkipped;r>0&&(a.passRate=Math.round(a.totalPassed/r*100*100)/100,a.failRate=Math.round(a.totalFailed/r*100*100)/100,a.skipRate=Math.round(a.totalSkipped/r*100*100)/100),t.length>0&&(a.averageDuration=Math.round(a.totalDuration/t.length));const n={generated:(new Date).toISOString(),version:"2.1.0",reports:t,deletionInfo:{deletedCount:0,pendingCleanup:0,lastDeletionAt:null},statistics:a,errors:s};return fs.writeFileSync("index.json",JSON.stringify(n,null,2)),console.log("✅ Index generation completed successfully!"),console.log(`📊 Reports: ${t.length}`),console.log(`⚠️  Errors: ${s.length}`),console.log(`📈 Pass rate: ${a.passRate}%`),n}require.main===module&&generateIndex(),module.exports={generateIndex};