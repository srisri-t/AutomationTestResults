#!/usr/bin/env node
const fs=require("fs"),path=require("path"),REPORTS_DIR=__dirname,INDEX_FILE=path.join(REPORTS_DIR,"index.json");function cleanupExistingFiles(){console.log("üóëÔ∏è  Cleaning up existing files...");const e=fs.readdirSync(REPORTS_DIR),t=["cleanup-and-import-from-git.js","generate-index-enhanced.js","generate-index-tolerant-v2.js","cleanup-reports.js",".gitkeep"];e.forEach(e=>{if(!t.includes(e)&&!e.startsWith(".git")){const t=path.join(REPORTS_DIR,e);try{fs.statSync(t).isFile()&&(fs.unlinkSync(t),console.log(`   ‚úÖ Deleted: ${e}`))}catch(o){console.warn(`   ‚ö†Ô∏è  Could not delete ${e}:`,o.message)}}})}function findReportFiles(){console.log("üîç Finding report files...");const e=fs.readdirSync(REPORTS_DIR),t=e.filter(e=>e.endsWith(".json")&&"index.json"!==e&&!e.includes("backup"));return console.log(`   üìä Found ${t.length} report files`),t}function processReportFiles(e){console.log("‚öôÔ∏è  Processing report files...");const t=[];return e.forEach(e=>{try{const o=path.join(REPORTS_DIR,e),s=fs.readFileSync(o,"utf8"),n=JSON.parse(s),r=extractReportMetadata(n,e);r&&(t.push(r),console.log(`   ‚úÖ Processed: ${e} -> ${r.name||"Untitled"}`))}catch(o){console.warn(`   ‚ö†Ô∏è  Error processing ${e}:`,o.message)}}),t}function extractReportMetadata(e,t){try{const o=t.replace(".json",""),s=Array.isArray(e)?e:[e];let n=0,r=0,a=0,l=0,i=0,c=0,p="",d=null;const u=new Set;if(s.forEach(e=>{e&&e.elements&&(e.name&&!p&&(p=e.name),e.tags&&e.tags.forEach(e=>{e.name&&u.add(e.name.replace("@",""))}),e.elements.forEach(e=>{"scenario"===e.type&&(n++,e.steps&&e.steps.forEach(e=>{if(r++,e.result){const t=e.result.status,o=e.result.duration||0;switch(c+=o,t){case"passed":a++;break;case"failed":l++;break;case"skipped":case"pending":case"undefined":i++;break}e.result.timestamp&&!d&&(d=new Date(e.result.timestamp))}}))}))}),!d){const e=o.match(/(\d{4})(\d{2})(\d{2})T(\d{2})(\d{2})(\d{2})/);if(e){const[,t,o,s,n,r,a]=e;d=new Date(`${t}-${o}-${s}T${n}:${r}:${a}Z`)}else d=new Date}return{id:o,name:p||"Test Report",date:d.toISOString(),timestamp:d.toISOString(),features:s.length,scenarios:n,steps:r,passed:a,failed:l,skipped:i,duration:Math.round(c/1e6),tags:Array.from(u),size:JSON.stringify(e).length}}catch(o){return console.error(`Error extracting metadata from ${t}:`,o),null}}function generateIndex(e){console.log("üìù Generating index.json..."),e.sort((e,t)=>new Date(e.timestamp)-new Date(t.timestamp));const t={totalReports:e.length,totalScenarios:e.reduce((e,t)=>e+t.scenarios,0),totalSteps:e.reduce((e,t)=>e+t.steps,0),totalPassed:e.reduce((e,t)=>e+t.passed,0),totalFailed:e.reduce((e,t)=>e+t.failed,0),totalSkipped:e.reduce((e,t)=>e+t.skipped,0),passRate:"0.00",failRate:"0.00",skipRate:"0.00"};t.totalSteps>0&&(t.passRate=(t.totalPassed/t.totalSteps*100).toFixed(2),t.failRate=(t.totalFailed/t.totalSteps*100).toFixed(2),t.skipRate=(t.totalSkipped/t.totalSteps*100).toFixed(2));const o={reports:e,statistics:t,version:"1.0.0",lastUpdated:(new Date).toISOString(),generatedBy:"cleanup-and-import-from-git.js"};return fs.writeFileSync(INDEX_FILE,JSON.stringify(o,null,2)),console.log(`   ‚úÖ Generated index.json with ${e.length} reports`),o}function generateCleanupInstructions(){console.log("üåê Browser cleanup instructions:"),console.log("   To complete the cleanup, run this in your browser console:"),console.log("   localStorage.clear(); location.reload();")}function main(){try{console.log("üöÄ Cleanup and Import from Git Repository"),console.log("=========================================="),cleanupExistingFiles();const e=findReportFiles();if(0===e.length)return console.log("‚ö†Ô∏è  No report files found in the directory"),void console.log("   Make sure you have .json report files in:",REPORTS_DIR);const t=processReportFiles(e);if(0===t.length)return void console.log("‚ùå No valid reports could be processed");const o=generateIndex(t);generateCleanupInstructions(),console.log(""),console.log("‚úÖ Cleanup and import completed successfully!"),console.log("üìä Summary:"),console.log(`   - Reports processed: ${t.length}`),console.log(`   - Total scenarios: ${o.statistics.totalScenarios}`),console.log(`   - Total steps: ${o.statistics.totalSteps}`),console.log(`   - Pass rate: ${o.statistics.passRate}%`),console.log(""),console.log("üîÑ Refresh your browser to see the updated reports")}catch(e){console.error("‚ùå Error during cleanup and import:",e),process.exit(1)}}console.log("üßπ Starting cleanup and import process..."),require.main===module&&main(),module.exports={main,cleanupExistingFiles,findReportFiles,processReportFiles,generateIndex};