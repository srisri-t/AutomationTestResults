#!/usr/bin/env node
const fs=require("fs"),path=require("path");console.log("🧹 Starting report cleanup...");const systemFiles=["index.json","stats.json","generate-index.js","generate-index-enhanced.js","generate-index-smart.js","safe-index-regeneration.js","index-monitor.js","cleanup-reports.js","package.json",".deleted-reports.json"],systemDirs=[".backups","uploads"];function getFileAge(e){try{const n=fs.statSync(e),o=new Date,s=n.mtime,t=(o-s)/864e5;return t}catch(n){return 0}}function isReportFile(e){return e.endsWith(".json")&&!systemFiles.includes(e)&&!e.startsWith("index-")}function cleanupOldBackups(){const e=".backups";if(!fs.existsSync(e))return;console.log("🗂️ Cleaning up old backups...");const n=fs.readdirSync(e);let o=0;n.forEach(n=>{const s=path.join(e,n),t=getFileAge(s);if(t>30)try{fs.unlinkSync(s),console.log(`  ❌ Removed old backup: ${n} (${Math.round(t)} days old)`),o++}catch(r){console.warn(`  ⚠️ Could not remove ${n}: ${r.message}`)}}),console.log(`✅ Removed ${o} old backup files`)}function analyzeReports(){console.log("📊 Analyzing current reports...");const e=fs.readdirSync("."),n=e.filter(isReportFile);console.log(`📁 Found ${n.length} report files:`);const o=n.map(e=>{const n=getFileAge(e);let o=0,s=!1;try{const n=fs.statSync(e);o=n.size;const t=fs.readFileSync(e,"utf8"),r=JSON.parse(t);s=Array.isArray(r)&&r.length>0}catch(t){s=!1}return{name:e,age:Math.round(n),size:Math.round(o/1024),isValid:s}});return o.sort((e,n)=>e.age-n.age),o.forEach(e=>{const n=e.isValid?"✅":"❌";console.log(`  ${n} ${e.name} - ${e.age} days old, ${e.size}KB`)}),o}function promptForCleanup(e){console.log("\n🤔 Cleanup recommendations:");const n=e.filter(e=>e.age>90),o=e.filter(e=>!e.isValid),s=findDuplicates(e);return n.length>0&&console.log(`📅 Found ${n.length} reports older than 90 days`),o.length>0&&console.log(`❌ Found ${o.length} invalid/corrupted reports`),s.length>0&&console.log(`🔄 Found ${s.length} potential duplicate reports`),{oldReports:n,invalidReports:o,duplicateReports:s}}function findDuplicates(e){const n={};e.forEach(e=>{const o=e.name.replace(/-\d{4}-\d{2}-\d{2}T[\d-:.]+Z\.json$/,"");n[o]||(n[o]=[]),n[o].push(e)});const o=[];return Object.values(n).forEach(e=>{e.length>5&&(e.sort((e,n)=>e.age-n.age),o.push(...e.slice(5)))}),o}function performCleanup(e){if(0===e.length)return void console.log("✅ No files to remove");console.log(`\n🗑️ Removing ${e.length} files...`);let n=0;e.forEach(e=>{try{fs.unlinkSync(e.name),console.log(`  ❌ Removed: ${e.name}`),n++}catch(o){console.warn(`  ⚠️ Could not remove ${e.name}: ${o.message}`)}}),console.log(`✅ Successfully removed ${n} files`)}function regenerateIndex(){console.log("\n🔄 Regenerating index...");try{fs.existsSync("safe-index-regeneration.js")?require("./safe-index-regeneration.js").safeRegenerate():fs.existsSync("generate-index-enhanced.js")?require("./generate-index-enhanced.js"):require("./generate-index.js"),console.log("✅ Index regenerated successfully")}catch(e){console.error("❌ Failed to regenerate index:",e.message)}}async function main(){try{cleanupOldBackups();const e=analyzeReports(),{oldReports:n,invalidReports:o,duplicateReports:s}=promptForCleanup(e),t=[...o,...s];e.length>20&&n.length>0&&(console.log("📦 Large number of reports detected, removing old ones..."),t.push(...n)),performCleanup(t),regenerateIndex();const r=fs.readdirSync(".").filter(isReportFile);console.log("\n📊 Cleanup complete!"),console.log(`📁 Remaining reports: ${r.length}`),console.log(`🗑️ Files removed: ${t.length}`)}catch(e){console.error("❌ Cleanup failed:",e),process.exit(1)}}require.main===module&&main(),module.exports={main};